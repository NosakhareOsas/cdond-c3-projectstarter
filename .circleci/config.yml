version: 2.1
defaults: &defaults
  docker:
    - image: cimg/node:13.8.0
orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy_environment:
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:7} takes the first 7 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
              aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >> 
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  install_aws_cli:
    steps:
      - run:
          name: Install Aws CLI
          command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install_python_ansible:
    steps:
      - run:
          name: Install Python and Ansible
          command: |
              sudo apt update
              sudo apt install -y python3 python3-pip
              python3 -m pip install --user ansible

  install_npm_node:
    steps:
      - run:
          name: Install NPM and Node
          command: |
              cd ~
              sudo apt update
              curl -sL https://deb.nodesource.com/setup_16.x -o /tmp/nodesource_setup.sh
              sudo bash /tmp/nodesource_setup.sh
              sudo apt install nodejs
              node --version
              npm -v


jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1
      
  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      
  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix 
            npm install --save-dev webpack@5.73.0
            npm update mkdirp --depth 2
            npm audit fix
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt;
            cat .circleci/ansible/inventory.txt;
           
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  configure-infrastructure: 
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: sudo apt install -y tar gzip
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["a3:28:7c:34:8a:b1:b2:94:4f:cc:1a:d4:7b:14:fe:23"]
      - install_aws_cli
      - install_python_ansible
      - run:
          name: Run Playbook and Configure server
          command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml

      - destroy_environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install_aws_cli
      - install_npm_node
      - run:
          name: Run and save migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            npm audit fix
            npm audit fix --audit-level=critical --force        
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
              curl https://kvdb.io/PC7rSF6jLFj3Jc1CFkbcVH/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_npm_node
      - install_aws_cli
      - install_python_ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: sudo apt install -y tar gzip
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["a3:28:7c:34:8a:b1:b2:94:4f:cc:1a:d4:7b:14:fe:23"]
      - install_npm_node
      - install_python_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:    
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
        
      